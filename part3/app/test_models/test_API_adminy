import unittest
from app import create_app, db
from app.models import User
from flask_jwt_extended import create_access_token
from flask import json
import json

class TestUserAPI(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        # Utilise la configuration de base
        cls.app = create_app()  # ou create_app('config.Config') si ta config de base s'appelle ainsi
        cls.app.config['TESTING'] = True  # Active le mode test
        cls.client = cls.app.test_client()
        with cls.app.app_context():
            db.create_all()

    @classmethod
    def tearDownClass(cls):
        # Nettoyage complet de la DB après l'exécution de tous les tests
        with cls.app.app_context():
            db.session.remove()
            db.drop_all()

    def test_create_admin_user(self):
        """Test the creation of an admin user."""
        # Create an admin user (admin credentials would usually be created with JWT)
        admin_user_data = {
            "first_name": "Admin",
            "last_name": "User",
            "email": "admin@example.com",
            "password": "securepassword",
            "is_admin": True
        }

        # Simulate a request with admin privileges
        admin_token = create_access_token(identity={'id': 1, 'is_admin': True})  # Simulate an admin JWT

        response = self.client.post(
            '/api/v1/users/',
            data=json.dumps(admin_user_data),
            content_type='application/json',
            headers={'Authorization': f'Bearer {admin_token}'}
        )

        # Assert the response
        self.assertEqual(response.status_code, 201)
        response_json = json.loads(response.data)
        self.assertIn('id', response_json)
        self.assertEqual(response_json['message'], 'User successfully created')

        # Verify that the user is an admin
        created_user = User.query.get(response_json['id'])
        self.assertIsNotNone(created_user)
        self.assertTrue(created_user.is_admin)  # Ensure the user is created as admin

    def test_create_non_admin_user_without_permission(self):
        """Test that a non-admin user cannot create another user."""
        user_data = {
            "first_name": "Regular",
            "last_name": "User",
            "email": "regular@example.com",
            "password": "securepassword",
            "is_admin": False
        }

        # Simulate a request with non-admin privileges
        non_admin_token = create_access_token(identity={'id': 2, 'is_admin': False})  # Simulate a non-admin JWT

        response = self.client.post(
            '/api/v1/users/',
            data=json.dumps(user_data),
            content_type='application/json',
            headers={'Authorization': f'Bearer {non_admin_token}'}
        )

        # Assert the response
        self.assertEqual(response.status_code, 403)
        response_json = json.loads(response.data)
        self.assertEqual(response_json['error'], 'Admin privileges required')

    def test_create_user_with_existing_email(self):
        """Test the creation of a user with an existing email."""
        existing_user_data = {
            "first_name": "Existing",
            "last_name": "User",
            "email": "existing@example.com",
            "password": "securepassword",
            "is_admin": False
        }

        # Create the first user
        self.client.post(
            '/api/v1/users/',
            data=json.dumps(existing_user_data),
            content_type='application/json',
        )

        # Attempt to create another user with the same email
        new_user_data = {
            "first_name": "New",
            "last_name": "User",
            "email": "existing@example.com",  # Same email as the existing one
            "password": "securepassword",
            "is_admin": False
        }

        response = self.client.post(
            '/api/v1/users/',
            data=json.dumps(new_user_data),
            content_type='application/json',
        )

        # Assert the response
        self.assertEqual(response.status_code, 400)
        response_json = json.loads(response.data)
        self.assertEqual(response_json['error'], 'Email already registered')

if __name__ == '__main__':
    unittest.main()
